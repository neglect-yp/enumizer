// Code generated by enumizer; DO NOT EDIT.
package model

import "fmt"

var barSet = map[Bar]struct{}{
	BarA: {},
	BarB: {},
	BarC: {},
}

func BarList() []Bar {
	ret := make([]Bar, 0, len(barSet))
	for v := range barSet {
		ret = append(ret, v)
	}
	return ret
}

func (m Bar) String() string {
	switch m {
	case BarA:
		return "A"
	case BarB:
		return "B"
	case BarC:
		return "C"
	default:
		return "<unknown Bar>"
	}
}

func (m Bar) IsValid() bool {
	_, ok := barSet[m]
	return ok
}

func (m Bar) Validate() error {
	if !m.IsValid() {
		return fmt.Errorf("Bar(%v) is invalid", m)
	}
	return nil
}

var fooSet = map[Foo]struct{}{
	FooA: {},
	FooB: {},
	FooC: {},
}

func FooList() []Foo {
	ret := make([]Foo, 0, len(fooSet))
	for v := range fooSet {
		ret = append(ret, v)
	}
	return ret
}

func (m Foo) String() string {
	switch m {
	case FooA:
		return "A"
	case FooB:
		return "B"
	case FooC:
		return "C"
	default:
		return "<unknown Foo>"
	}
}

func (m Foo) IsValid() bool {
	_, ok := fooSet[m]
	return ok
}

func (m Foo) Validate() error {
	if !m.IsValid() {
		return fmt.Errorf("Foo(%v) is invalid", m)
	}
	return nil
}
